1 CRUD -> Model -> schema 
steps :-

Insert :-
=======
1. mongoose package connection (connect.js) -> connection will set up automatically.

db.collection.insert()
db.collection.find()
db.collection.update()
db.collection.delete()

Reference : db object 
insert/create : user 
=====================
1. connect() => db Object 
2. mongoose -> schema 
3. db -> model -> collection name 
4. user = new User();
   user.save().then(function(data){
    console.log('Record Inserted',data);
   }).catch(function(error){
        console.log('Insertion Failed',error);
   });

select/All : user 
=====================
1. connect() => db Object 
2. mongoose -> schema 
3. db -> model -> collection name 
4. user model
   user.find().then(function(data){
    console.log('Record found',data);
   }).catch(function(error){
        console.log('No Record found',error);
   });

select/One : user 
=====================
1. connect() => db Object 
2. mongoose -> schema 
3. db -> model -> collection name 
4. user model
   user.find({_id:user_id}).then(function(data){
    console.log('Record found',data);
   }).catch(function(error){
        console.log('No Record found',error);
   });


delete/One : user 
=====================
1. connect() => db Object 
2. mongoose -> schema 
3. db -> model -> collection name 
4. user model
   user.findByIdAndDelete({_id:user_id}).then(function(data){
    console.log('Record Deleted',data);
   }).catch(function(error){
        console.log('No Record found',error);
   });


Update/One : user 
=====================
1. connect() => db Object 
2. mongoose -> schema 
3. db -> model -> collection name 
4. user model
   user.findByIdAndUpdate({_id:user_id},{name:"New Name",age:"new Age"},{new:true}).then(function(data){
    console.log('Record Updated',data);
   }).catch(function(error){
        console.log('No Record found',error);
   });


Working with environment variable :-
======================================
when we were working mongosh we added the path in environment variable.
adding path,values or any information in environment variable
gives us the global access.
meaning you can access it from any where.

generally we make config.json and store all the configuration 
of application in one place.
but there is problem with config.json.

1. config.json will be stored in repository. and body can see you database password
hack.
2. security issue.
3. plateform dependency (every operating system may not support)
4. config.json globally available.

credentials or server information or secret like database paassword ,ip address 
port we keep in environment variable.
1. global 
2. secure 
3. .env in pushed in github.

In Order to read .env we need a special package 
package : dotenv

npm install dotenv











